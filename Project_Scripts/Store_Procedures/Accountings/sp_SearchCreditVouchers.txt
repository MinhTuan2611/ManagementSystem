CREATE OR ALTER   PROCEDURE [dbo].[sp_SearchCreditVouchers]
	@xmlString NVARCHAR(MAX)
	,@pageNumber INT = 1
	,@pageSize INT = 10
	,@TotalRecords INT OUTPUT
AS
BEGIN
	DECLARE @sqlQuery VARCHAR(MAX)
			,@sqlQuery_condition VARCHAR(MAX)
			,@pagingString VARCHAR(MAX)
			,@orderBy VARCHAR(MAX)

	DECLARE @xml XML
	SET @xml = CAST(@xmlString AS XML)

	-- Create a table variable to store the parsed values
	DECLARE @SearchCriteriaTable TABLE
	(
		[Key] NVARCHAR(255),
		[Value] NVARCHAR(255)
	)

	-- Insert the values from XML into the table variable
	INSERT INTO @SearchCriteriaTable ([Key], [Value])
	SELECT
		Criteria.value('(Key)[1]', 'NVARCHAR(255)') AS [Key],
		Criteria.value('(Value)[1]', 'NVARCHAR(255)') AS [Value]
	FROM @xml.nodes('/SearchCriteria/Criteria') AS SearchCriteria(Criteria)

	-- Map to create dynamic condition
	DROP TABLE IF EXISTS #web_column_mapping
	CREATE TABLE #web_column_mapping
	(
		WEB_COLUMN VARCHAR(128)
		,DB_COLUMN_ALIAS VARCHAR(MAX)
		,DB_COLUMN_OPERATION VARCHAR(8) DEFAULT ' = '
	)

	INSERT INTO #web_column_mapping VALUES('FromDate', 'FORMAT(r.TransactionDate, ''yyyy-MM-dd'')', '>=')
	INSERT INTO #web_column_mapping VALUES('ToDate', 'FORMAT(r.TransactionDate, ''yyyy-MM-dd'')', '<=')
	INSERT INTO #web_column_mapping VALUES('BranchId', 'b.BranchId', '=')
	SELECT @sqlQuery_condition = CONCAT(@sqlQuery_condition,+ ' AND '
						+ col_map.DB_COLUMN_ALIAS
						+ col_map.DB_COLUMN_OPERATION
						+ '''' + xml_parsed.[Value] + ''''
						+ (CHAR(10)) )
	FROM @SearchCriteriaTable xml_parsed
	JOIN #web_column_mapping col_map ON xml_parsed.[Key] = col_map.WEB_COLUMN

	-- Handle Pagination
	SET @pagingString = CONCAT(@pagingString,' 
										OFFSET ', CONVERT(NVARCHAR(30), @PageNumber - 1), '*', CONVERT(NVARCHAR(30),@pageSize), ' ROWS 
										FETCH NEXT ', CONVERT(NVARCHAR(30), @pageSize), ' ROWS ONLY ')
	-- Handle OrderBy
	SET @orderBy = 'ORDER BY r.TransactionDate DESC'

	-- Create a temporary table
	DROP TABLE IF EXISTS #tmp_records
	CREATE TABLE #tmp_records
	(
		DocumentNumber INT,
		TransactionDate DATETIME,
		CustomerId INT,
		CustomerName NVARCHAR(255),
		Payer NVARCHAR(255),
		ForReason NVARCHAR(MAX),
		TotalMoney DECIMAL(18, 2),
		UserId INT,
		Cashier NVARCHAR(255),
		PaymentMethodCode VARCHAR(128),
		PaymentMethodName NVARCHAR(128),
		CreditAccount VARCHAR(128),
		DebitAccount VARCHAR(128),
		BranchId INT
	);

	-- Return result
	SET @sqlQuery = CONCAT('
			INSERT INTO #tmp_records
			SELECT r.DocumentNumber
					,r.TransactionDate
					,c.CustomerId
					,c.CustomerName
					,c.CustomerName AS Payer
					,rt.ReasonName
					,r.TotalMoney
					,u.UserId
					,u.UserName AS Cashier
					,pm.PaymentMethodCode
					,pm.PaymentMethodName
					,r.CreditAccount
					,r.DebitAccount
					,b.BranchId
			FROM dbo.CreditVouchers r
			LEFT JOIN DEV_StoragesDb.dbo.Customers c ON r.CustomerId = c.CustomerId
			LEFT JOIN DEV_AccountsDb.dbo.Users u ON u.UserId = r.UserId
			LEFT JOIN DEV_AccountsDb.dbo.UserBranchs ub ON u.UserId = ub.UserId
			LEFT JOIN DEV_StoragesDb.dbo.Branches b ON ub.BranchId = b.BranchId
			JOIN DEV_StoragesDb.dbo.PaymentMethods pm ON pm.PaymentMethodId = r.PaymentMethodId
			JOIN dbo.Recordingtransactions rt ON rt.ReasonCode = r.ForReason
		WHERE 1 = 1
	', @sqlQuery_condition)

	EXEC (@sqlQuery)
	
	SELECT @TotalRecords = COUNT(1) FROM #tmp_records
	
	SELECT *
	FROM #tmp_records
	ORDER BY TransactionDate DESC
	OFFSET (@PageNumber - 1) * @PageSize ROWS FETCH NEXT @pageSize ROWS ONLY
END